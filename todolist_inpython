import tkinter as tk
from tkinter import messagebox, simpledialog
import json
import os
from datetime import datetime

TODO_FILE = "todo_list.json"

# Colors
PRIORITY_COLOR = {"High": "red", "Medium": "orange", "Low": "green"}
DARK_BG = "#2e2e2e"
DARK_FG = "#f0f0f0"
LIGHT_BG = "#ffffff"
LIGHT_FG = "#000000"

class TodoManager:
    def __init__(self, root):
        self.root = root
        self.root.title("Pro To-Do Manager with Dark Mode & Sorting")
        self.root.geometry("750x550")
        self.tasks = self.load_tasks()
        self.dark_mode = False

        # UI Elements
        self.listbox = tk.Listbox(root, width=100, height=20)
        self.listbox.pack(pady=10)

        self.frame = tk.Frame(root)
        self.frame.pack(pady=5)

        self.create_buttons()
        self.refresh_listbox()

    # --------------------- Data Handling --------------------- #
    def load_tasks(self):
        if os.path.exists(TODO_FILE):
            with open(TODO_FILE, "r") as f:
                try:
                    return json.load(f)
                except json.JSONDecodeError:
                    messagebox.showwarning("Warning", "Corrupted todo file. Starting fresh.")
                    return []
        return []

    def save_tasks(self):
        with open(TODO_FILE, "w") as f:
            json.dump(self.tasks, f, indent=4)

    # --------------------- Task Operations --------------------- #
    def add_task(self):
        title = simpledialog.askstring("Task Title", "Enter task title:", parent=self.root)
        if not title: return
        priority = simpledialog.askstring("Priority", "Enter priority (High/Medium/Low):", initialvalue="Medium")
        if priority not in ["High", "Medium", "Low"]: priority = "Medium"
        due_date = simpledialog.askstring("Due Date", "Enter due date (YYYY-MM-DD) or leave blank:", initialvalue="")
        if due_date:
            try: datetime.strptime(due_date, "%Y-%m-%d")
            except: messagebox.showwarning("Warning", "Invalid date format. Using N/A."); due_date = "N/A"
        else: due_date = "N/A"
        self.tasks.append({"title": title, "done": False, "priority": priority, "due_date": due_date})
        self.refresh_listbox()

    def delete_task(self):
        idx = self.get_selected_index()
        if idx is None: return
        removed = self.tasks.pop(idx)
        self.refresh_listbox()
        messagebox.showinfo("Deleted", f"Task '{removed['title']}' deleted!")

    def toggle_done(self):
        idx = self.get_selected_index()
        if idx is None: return
        self.tasks[idx]["done"] = not self.tasks[idx]["done"]
        self.refresh_listbox()

    def edit_task(self):
        idx = self.get_selected_index()
        if idx is None: return
        task = self.tasks[idx]
        new_title = simpledialog.askstring("Edit Title", f"Edit title (current: {task['title']}):")
        if new_title: task["title"] = new_title
        new_priority = simpledialog.askstring("Edit Priority", f"Edit priority (High/Medium/Low, current: {task['priority']}):")
        if new_priority in ["High", "Medium", "Low"]: task["priority"] = new_priority
        new_due = simpledialog.askstring("Edit Due Date", f"Edit due date (YYYY-MM-DD, current: {task['due_date']}):")
        if new_due:
            try: datetime.strptime(new_due, "%Y-%m-%d"); task["due_date"] = new_due
            except: messagebox.showwarning("Warning","Invalid date. Keeping old.")
        self.refresh_listbox()

    def clear_all_tasks(self):
        if messagebox.askyesno("Clear All", "Are you sure you want to delete ALL tasks?"):
            self.tasks.clear()
            self.refresh_listbox()

    def search_task(self):
        keyword = simpledialog.askstring("Search Task", "Enter keyword to search:")
        if not keyword: return
        filtered = [t for t in self.tasks if keyword.lower() in t["title"].lower()]
        if not filtered: messagebox.showinfo("Search", "No matching tasks found.")
        self.refresh_listbox(filtered)

    # --------------------- UI & Helper Methods --------------------- #
    def refresh_listbox(self, filtered_tasks=None, filter_type="all", sort_by=None):
        self.listbox.delete(0, tk.END)
        tasks_to_display = filtered_tasks if filtered_tasks is not None else self.tasks.copy()

        # Filter
        if filter_type == "pending": tasks_to_display = [t for t in tasks_to_display if not t["done"]]
        elif filter_type == "completed": tasks_to_display = [t for t in tasks_to_display if t["done"]]

        # Sort
        if sort_by == "priority":
            tasks_to_display.sort(key=lambda t: {"High":0,"Medium":1,"Low":2}[t.get("priority","Medium")])
        elif sort_by == "due_date":
            tasks_to_display.sort(key=lambda t: t.get("due_date","9999-12-31"))

        for idx, task in enumerate(tasks_to_display):
            status = "✅" if task["done"] else "❌"
            priority = task.get("priority", "Medium")
            due = task.get("due_date", "N/A")
            text = f"{idx+1}. {task['title']} [{status}] - Priority: {priority} - Due: {due}"
            self.listbox.insert(tk.END, text)

            # Highlight overdue
            color = PRIORITY_COLOR.get(priority, "black")
            if due != "N/A" and not task["done"]:
                try:
                    due_date = datetime.strptime(due, "%Y-%m-%d")
                    if due_date < datetime.now(): color = "red"
                except: pass
            self.listbox.itemconfig(tk.END, {'fg': color})

    def get_selected_index(self):
        selection = self.listbox.curselection()
        if not selection: return None
        return selection[0]

    def toggle_dark_mode(self):
        self.dark_mode = not self.dark_mode
        bg = DARK_BG if self.dark_mode else LIGHT_BG
        fg = DARK_FG if self.dark_mode else LIGHT_FG
        self.root.configure(bg=bg)
        self.listbox.configure(bg=bg, fg=fg)
        self.frame.configure(bg=bg)
        for child in self.frame.winfo_children(): child.configure(bg=bg, fg=fg)
        self.refresh_listbox()

    def create_buttons(self):
        # Row 0
        tk.Button(self.frame, text="Add Task", command=self.add_task, width=15).grid(row=0, column=0, padx=5, pady=5)
        tk.Button(self.frame, text="Delete Task", command=self.delete_task, width=15).grid(row=0, column=1, padx=5, pady=5)
        tk.Button(self.frame, text="Mark Done/Undone", command=self.toggle_done, width=15).grid(row=0, column=2, padx=5, pady=5)
        tk.Button(self.frame, text="Edit Task", command=self.edit_task, width=15).grid(row=0, column=3, padx=5, pady=5)
        tk.Button(self.frame, text="Clear All", command=self.clear_all_tasks, width=15).grid(row=0, column=4, padx=5, pady=5)
        # Row 1
        tk.Button(self.frame, text="Search Task", command=self.search_task, width=15).grid(row=1, column=0, padx=5, pady=5)
        tk.Button(self.frame, text="Show All", command=lambda:self.refresh_listbox(), width=15).grid(row=1, column=1, padx=5, pady=5)
        tk.Button(self.frame, text="Show Pending", command=lambda:self.refresh_listbox(filter_type="pending"), width=15).grid(row=1, column=2, padx=5, pady=5)
        tk.Button(self.frame, text="Show Completed", command=lambda:self.refresh_listbox(filter_type="completed"), width=15).grid(row=1, column=3, padx=5, pady=5)
        tk.Button(self.frame, text="Sort by Priority", command=lambda:self.refresh_listbox(sort_by="priority"), width=15).grid(row=2, column=0, padx=5, pady=5)
        tk.Button(self.frame, text="Sort by Due Date", command=lambda:self.refresh_listbox(sort_by="due_date"), width=15).grid(row=2, column=1, padx=5, pady=5)
        tk.Button(self.frame, text="Toggle Dark Mode", command=self.toggle_dark_mode, width=15).grid(row=2, column=2, padx=5, pady=5)
        tk.Button(self.frame, text="Save & Exit", command=lambda:[self.save_tasks(), self.root.destroy()], width=15).grid(row=2, column=3, padx=5, pady=5)

# --------------------- Run App --------------------- #
if __name__ == "__main__":
    root = tk.Tk()
    app = TodoManager(root)
    root.mainloop()
